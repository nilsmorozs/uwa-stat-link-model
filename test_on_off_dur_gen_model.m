% This script is used to test if the synthesised random link realisations follow
% the same CDF distributions as the statistical model generated by the 'gen_link_model.m' script

% This script is used to process the ASUNA Werbellin lake dataset 
% and generate statistical link models as described in the paper

% Copyright 2024 Nils Morozs, University of York (nils.morozs@york.ac.uk)
%
% Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
% associated documentation files (the "Software"), to deal in the Software without restriction,
% including without limitation the rights to use, copy, modify, merge, publish, distribute,
% sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all copies or substantial
% portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
% NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
% OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

%% Import the model
load('on_off_dur_model_werbellin16.mat');

%% Generate link ON/OFF state durations from the empirical CDF model

num_links = 6; % number of link realisations to generate
num_link_types = 3; % good, average, poor
link_types = [1, 1, 2, 2, 3, 3]; % 1 - good, 2 - average, 3 - poor
num_states = 2; % ON & OFF
num_gen_samples = 10e3; % generate 10000 durations for each type and states
state_dur_mat = NaN(num_link_types, num_states, num_gen_samples);

% For every link type and state, use the empirical distribution to generate random durations
for n = 1:num_link_types
    for k = 1:num_states

        % Pick the corresponding empirical CDF
        if (k == 1)
            dur_vals = on_off_dur_model{n}.on_dur_vals;
            prc_vals = on_off_dur_model{n}.on_prc_vals;
        else
            dur_vals = on_off_dur_model{n}.off_dur_vals;
            prc_vals = on_off_dur_model{n}.off_prc_vals;
        end

        % Generate uniform random numbers and use them to draw the duration out of the CDF
        for r = 1:num_gen_samples
            rand_num = rand;
            state_dur_mat(n, k, r) = interp1(prc_vals, dur_vals, rand_num, 'linear');
        end
    end
end

%% Plot the resulting CDFs and compare against the empirical models
cdf_line_styles = {'-.', '--'};
for n = 1:num_link_types
    figure; hold on;
    for k = 1:num_states
        h = cdfplot(squeeze(state_dur_mat(n, k, :)));
        set(h, 'LineStyle', cdf_line_styles{k}, 'LineWidth', 2);
    end
    plot(on_off_dur_model{n}.on_dur_vals, on_off_dur_model{n}.on_prc_vals, 'b-', 'linewidth', 1);
    plot(on_off_dur_model{n}.off_dur_vals, on_off_dur_model{n}.off_prc_vals, 'r:', 'linewidth', 1);
    legend('ON state: generated data',  'OFF state: generated data', ...
            'ON state: model',  'OFF state: model', 'Location', 'SouthEast');
    xlabel('Link state duration, sec');
    legend('boxoff')
    ylabel('CDF');
    title('');
    box on;
    grid on;
    xlim([0 40]);
end
